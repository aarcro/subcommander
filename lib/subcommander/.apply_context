#!/usr/bin/python
"""

Locate the context file and exec it with our arguments, or just exec our
arguments if it does not exist.
"""

class SpecifiedContextNotFoundError(SubcommanderUserError, EnvironmentError):
    def __init__(self, ctx_envname, environment_contextfile):
        super(SpecifiedContextNotFoundError, self).__init__(
            3,
            "The context specified by %s does not exist" % ctx_envname,
            environment_contextfile)


def discover_context(context_filename):
    cwd = os.path.realpath(os.getcwd()).split(os.path.sep)
    for n in range(len(cwd), 0, -1):
        context_file = os.path.sep.join(cwd[0:n] + [context_filename])
        if os.path.exists(context_file):
            return context_file


def get_contextfile(ctx_envname):
    environment_context = os.environ.get(ctx_envname)
    context_filename = ".%(SC_MAIN)s.context" % os.environ
    discovered_contextfile = discover_context(context_filename)
    environment_contextfile = None

    if environment_context:
        environment_contextfile = os.path.join([
            environment_context, context_filename])
        if not os.path.exists(environment_contextfile):
            raise SpecifiedContextNotFoundError(
                    ctx_envname, environment_contextfile)

    if (environment_context and discovered_contextfile
            and not os.path.samefile(
                environment_context, discovered_contextfile)):
        warnings.warn(format_msg("""
            Context specified by %s=%s differs from and overrides context
            discovered at %s. Be sure that this is what you intend.""" % (
                ctx_envname, environment_context, discovered_contextfile)))

    if environment_contextfile:
        return environment_contextfile
    if discovered_contextfile:
        return discovered_contextfile
    return None


ctx_envname = ('%s_CONTEXT' % argv0_basename).upper().replace(' ', '_')
