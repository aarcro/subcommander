#!/usr/bin/python
"""
Locate the context file and exec it with our arguments, or just exec our
arguments if it does not exist.

"""
import os
import logging

logger=logging.getLogger()

class SpecifiedContextNotFoundError(EnvironmentError):
    def __init__(self, env_ctx_path_var, contextfile):
        super(SpecifiedContextNotFoundError, self).__init__(
            3,
            "The context specified by %s does not exist" % env_ctx_path_var,
            contextfile)


def get_contextfile():
    """Return the full path to the context file.

    Normally we walk up the directory tree looking for a contextfile, unless
    NAME_CONTEXT specifies a path.

    """
    env_ctx_path_var = ('%(SC_ARGV0)s_CONTEXT' % os.environ).upper().replace(' ', '_')
    contextfile_basename = ".%(SC_ARGV0)s.context" % os.environ

    environment_context_path = os.environ.get(env_ctx_path_var)
    if environment_context_path:
        contextfile = os.path.join(environment_context_path, contextfile_basename)
        if not os.path.exists(contextfile):
            raise SpecifiedContextNotFoundError(env_ctx_path_var, contextfile)
    else:
        cwd = os.path.realpath(os.getcwd()).split(os.path.sep)
        for n in range(len(cwd), 0, -1):
            contextfile = os.path.sep.join(cwd[:n] + [contextfile_basename])
            if os.path.exists(contextfile):
                break
        else:
            contextfile = None

        if contextfile:
            environment_context_path = os.path.dirname(contextfile)
            os.environ[env_ctx_path_var] = environment_context_path
            # For backwards compatibility with subcommander 0.x::
            os.environ['SC_CONTEXT'] = environment_context_path

    return contextfile


def apply_context(argv0, *args):
    contextfile = get_contextfile()

    # execv never returns; I 'return' to indicate execution won't continue
    if contextfile:
        return os.execv(contextfile, (contextfile,) + args)
    else:
        return os.execv(args[0], args)



def main():
    import sys
    logger.addHandler(logging.StreamHandler())
    try:
        return apply_context(*sys.argv)
    except SpecifiedContextNotFoundError, e:
        logger.error(e)
        return e.errno


if __name__ == '__main__':
    raise SystemExit(main())
