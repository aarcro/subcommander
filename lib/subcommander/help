#!/usr/bin/python
'''Subcommander 'help'

Description: Lists the available sub-commands (this text)

This script discovers the short descriptive text for each subcommand by
searching for text within the first 10 lines of each script following
"desc[ription]", optionally with a trailing : or =.
'''


from glob import glob
from itertools import islice
import os
import re
import sys

dirname = os.path.dirname(sys.argv[0])
desc_re = re.compile('.{0,4}desc(?:ription)?\s*[:=]\s*(.*)', re.I)


def get_description(filename):
    '''Look through the first few lines of a file for a Description: line,
    and return the description.

    For directories, look for dir.description or dir/_description

    '''
    if os.path.isdir(filename):

        for descfile in [
                '%s.description' % filename,
                os.path.join(filename, '_description')]:
            if os.path.exists(descfile):
                filename = descfile
                break
        else:
            return 'Runs subcommands'

        with open(filename) as fp:
            return fp.next().strip()

    else:

        with open(filename) as fp:
            for line in islice(fp, 10):
                try:
                    return desc_re.match(line).group(1)
                except AttributeError:
                    pass

    return ''


def list_subcommands():
    '''Walk through our sibling executables, displaying their name and their
    descriptive string.

    '''
    for f in sorted(glob(os.path.join(dirname, '*'))):
        basename = os.path.basename(f)
        #if os.path.isdir(f):
        #    continue
        if not os.access(f, os.R_OK|os.X_OK):
            continue
        if basename.startswith('_'):
            continue
        description = get_description(f)
        description = description.replace('$0', os.environ['SC_COMMAND'])
        description = description.replace('$1', basename)
        yield basename, description


def porcelain():
    '''Give the output in a stable, easy-to-parse format for scripts.'''
    for basename, description in list_subcommands():
        print '%s:%s' % (basename, description)


def usage():
    print "usage: {SC_COMMAND} COMMAND [ARGS...]".format(**os.environ)
    print
    print "Available {SC_COMMAND} commands are:".format(**os.environ)
    for basename, description in list_subcommands():
        print '    %-20s %s' % (basename, description)


def main(argv):
    if len(argv) == 2 and argv[1] == '--porcelain':
        porcelain()
    else:
        usage()


if __name__=='__main__':
    sys.exit(main(sys.argv))
