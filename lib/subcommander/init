#!/bin/sh
# Description: Initializes a directory for use with $0
set -e

context_file=".$SUBCOMMANDER.context"

if [ "$1" = "--help" ]; then
	fmt <<- EOF
		Usage: $SUBCOMMANDER $0 [DIRECTORY]

		Mark the DIRECTORY for use as a workspace for $SUBCOMMAND.

		Directories are $SUBCOMMAND workspaces if they contain a file
		$context_file. $SUBCOMMAND executes this file for every invocation.
	EOF
	exit
fi

if [ "$1" ]; then
	mkdir -p "$1"
	cd "$1"
	shift
fi

context_dir=`pwd -P`

if [ -e "$context_file" ]; then
	echo "$context_dir is already a $SUBCOMMANDER workspace."
	echo "(Context for $SUBCOMMANDER already exists: $context_dir/$context_file)"
	exit 1
else
	echo "Marking $context_dir as a $SUBCOMMANDER workspace."
	echo "(Initializing context for $SUBCOMMANDER as $context_dir/$context_file)"
	fmt -p '#' > "$context_file" <<-EOF
		#!/bin/sh
		# This file is a hook script executed by '$SUBCOMMANDER' every time you
		# run a '$SUBCOMMANDER' command. The mere existence of a file with this
		# name marks this directory and every directory within as a workarea or
		# 'context' for '$SUBCOMMANDER'. This means you can edit this script,
		# or replace it with your own executable script or compiled program, so
		# long as you take care to exec() the command passed in as arguments,
		# as is done below.

		# If you have hooks to execute or customizations to make to the
		# environment, you may do so here.

		exec "\$@"
		# Execution never returns from 'exec'; this line will never be reached.
	EOF
	chmod +x "$context_file"
fi
